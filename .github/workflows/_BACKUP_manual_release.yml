name: Manual Release
on:
  workflow_dispatch:
    inputs:
      confirmeRelease:
        description: 'Confirm manual release creation (by typing "true") ?  -----  WARNING : check version (in pom.xml files) and release notes (in CHANGELOG.md file) before confirm'
        default: 'false'
jobs:
  checks:
    name: Requirements
    if: github.event.inputs.confirmeRelease == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check user permissions
        uses: 74th/workflow-permission-action@1.0.0
        with:
          users: dedece35,glalloue,jhertout,jules-delecour-dav,olegoaer,zippy1978
  build:
    name: Build And Release
    needs: checks
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      last_tag: ${{ steps.export_last_tag.outputs.last_tag }}
      upload_url: ${{ steps.export_upload_url.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Change commiter
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email ''
      - name: Maven release
        run: ./mvnw release:prepare -B -ff -DtagNameFormat=@{project.version}
      - name: Maven release clean
        run: ./mvnw release:clean
      - name: Get last TAG
        run: echo "LAST_TAG=$(git tag --sort=-version:refname | head -n 1)" >> $GITHUB_ENV
      - name: Extract release notes
        id: extract-release-notes
        uses: ffurrer2/extract-release-notes@v1
      - name: Checkout tag "${{ env.LAST_TAG }}"
        uses: actions/checkout@v3
        with:
          ref: ${{ env.LAST_TAG }}
      - name: Build project
        run: ./mvnw -e -B clean package -DskipTests
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LAST_TAG }}
          release_name: Release ${{ env.LAST_TAG }}
          draft: false
          prerelease: false
          body: ${{ steps.extract-release-notes.outputs.release_notes }}
      - name: Export plugin Jar files
        id: export_jar_files
        uses: actions/upload-artifact@v3
        with:
          name: ecocode-plugins
          path: lib
      - name: Export LAST_TAG
        id: export_last_tag
        run: echo "last_tag=${{ env.LAST_TAG }}" >> $GITHUB_OUTPUT
      - name: Export UPLOAD_URL
        id: export_upload_url
        run: echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_OUTPUT
  upload-java:
    name: Upload Java Plugin
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Import plugin JAR files
        id: import_jar_files
        uses: actions/download-artifact@v4.1.7
        with:
          name: ecocode-plugins
          path: lib
      - name: Upload Release Asset - Java Plugin
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{needs.build.outputs.upload_url}}
          asset_path: lib/ecocode-java-plugin-${{ needs.build.outputs.last_tag }}.jar
          asset_name: ecocode-java-plugin-${{ needs.build.outputs.last_tag }}.jar
          asset_content_type: application/zip
